Only in step01: add-addi
Only in step01: add-addi.bin
Only in step01: add-addi.s
diff -x target -r step01/Cargo.lock step02/Cargo.lock
4c4
< name = "step1-rvemu-simple"
---
> name = "step2-rvemu-for-book"
diff -x target -r step01/Cargo.toml step02/Cargo.toml
2c2
< name = "step1-rvemu-simple"
---
> name = "step2-rvemu-for-book"
Only in step02: diff_02_03
Only in step02: fib
Only in step02: fib.bin
Only in step02: fib.c
Only in step02: fib.s
diff -x target -r step01/Makefile step02/Makefile
1,3c1,4
< add-addi.bin: add-addi.s
< 	riscv64-unknown-elf-gcc -Wl,-Ttext=0x0 -nostdlib -o add-addi add-addi.s
< 	riscv64-unknown-elf-objcopy -O binary add-addi add-addi.bin
---
> fib.bin: fib.c
> 	riscv64-unknown-elf-gcc -S fib.c
> 	riscv64-unknown-elf-gcc -Wl,-Ttext=0x0 -nostdlib -o fib fib.s
> 	riscv64-unknown-elf-objcopy -O binary fib fib.bin
6,7c7,8
< 	rm -f add-addi
< 	rm -f add-addi.bin
---
> 	rm -f fib
> 	rm -f fib.bin
Only in step02/src: bus.rs
Only in step02/src: cpu.rs
diff -x target -r step01/src/main.rs step02/src/main.rs
0a1,4
> mod bus;
> mod cpu;
> mod memory;
> 
6,98c10
< /// Default memory size (128MiB).
< pub const MEMORY_SIZE: u64 = 1024 * 1024 * 128;
< 
< /// The CPU to contain registers, a program coutner, and memory.
< struct Cpu {
<     /// 32 64-bit integer registers.
<     regs: [u64; 32],
<     /// Program counter to hold the the memory address of the next instruction that would be executed.
<     pc: u64,
<     /// Computer memory to store executable instructions.
<     memory: Vec<u8>,
< }
< 
< impl Cpu {
<     /// Create a new `Cpu` object.
<     fn new(binary: Vec<u8>) -> Self {
<         let mut regs = [0; 32];
<         regs[2] = MEMORY_SIZE;
< 
<         Self {
<             regs,
<             pc: 0,
<             memory: binary,
<         }
<     }
< 
<     /// Print values in all registers (x0-x31).
<     pub fn dump_registers(&self) {
<         let mut output = String::from("");
<         let abi = [
<             "zero", " ra ", " sp ", " gp ", " tp ", " t0 ", " t1 ", " t2 ", " s0 ", " s1 ", " a0 ",
<             " a1 ", " a2 ", " a3 ", " a4 ", " a5 ", " a6 ", " a7 ", " s2 ", " s3 ", " s4 ", " s5 ",
<             " s6 ", " s7 ", " s8 ", " s9 ", " s10", " s11", " t3 ", " t4 ", " t5 ", " t6 ",
<         ];
<         for i in (0..32).step_by(4) {
<             output = format!(
<                 "{}\n{}",
<                 output,
<                 format!(
<                     "x{:02}({})={:>#18x} x{:02}({})={:>#18x} x{:02}({})={:>#18x} x{:02}({})={:>#18x}",
<                     i,
<                     abi[i],
<                     self.regs[i],
<                     i + 1,
<                     abi[i + 1],
<                     self.regs[i + 1],
<                     i + 2,
<                     abi[i + 2],
<                     self.regs[i + 2],
<                     i + 3,
<                     abi[i + 3],
<                     self.regs[i + 3],
<                 )
<             );
<         }
<         println!("{}", output);
<     }
< 
<     /// Get an instruction from the memory.
<     fn fetch(&self) -> u32 {
<         let index = self.pc as usize;
<         return (self.memory[index] as u32)
<             | ((self.memory[index + 1] as u32) << 8)
<             | ((self.memory[index + 2] as u32) << 16)
<             | ((self.memory[index + 3] as u32) << 24);
<     }
< 
<     /// Execute an instruction after decoding.
<     fn execute(&mut self, inst: u32) {
<         let opcode = inst & 0x0000007f;
<         let rd = ((inst & 0x00000f80) >> 7) as usize;
<         let rs1 = ((inst & 0x000f8000) >> 15) as usize;
<         let rs2 = ((inst & 0x01f00000) >> 20) as usize;
< 
<         // Emulate that register x0 is hardwired with all bits equal to 0.
<         self.regs[0] = 0;
< 
<         match opcode {
<             0x13 => {
<                 // addi
<                 let imm = ((inst & 0xfff00000) as i32 as i64 >> 20) as u64;
<                 self.regs[rd] = self.regs[rs1].wrapping_add(imm);
<             }
<             0x33 => {
<                 // add
<                 self.regs[rd] = self.regs[rs1].wrapping_add(self.regs[rs2]);
<             }
<             _ => {
<                 dbg!(format!("not implemented yet: opcode {:#x}", opcode));
<             }
<         }
<     }
< }
---
> use crate::cpu::*;
112c24
<     while cpu.pc < cpu.memory.len() as u64 {
---
>     loop {
114c26,30
<         let inst = cpu.fetch();
---
>         let inst = match cpu.fetch() {
>             // Break the loop if an error occurs.
>             Ok(inst) => inst,
>             Err(_) => break,
>         };
121c37,46
<         cpu.execute(inst);
---
>         match cpu.execute(inst) {
>             // Break the loop if an error occurs.
>             Ok(_) => {}
>             Err(_) => break,
>         }
> 
>         // This is a workaround for avoiding an infinite loop.
>         if cpu.pc == 0 {
>             break;
>         }
Only in step02/src: memory.rs
